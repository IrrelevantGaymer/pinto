let Decimal = { 0 1 2 3 4 5 6 7 8 9 }
let SignedDecimal a = { (Pos a) (Neg a) } where a: Sexpr Decimal

map inc :: Decimal - {9} -> Decimal - {0} {
    0 => 1
    1 => 2
    2 => 3
    3 => 4
    4 => 5
    5 => 6
    6 => 7
    7 => 8
    8 => 9
}

map dec :: Decimal - {0} -> Decimal - {9} {
    1 => 0
    2 => 1
    3 => 2
    4 => 3
    5 => 4
    6 => 5
    7 => 6
    8 => 7
    9 => 8
}

// Incrementing Positive

for a n in All * Decimal - {9} case (Inc a) (Pos n) (Pos inc[n]) -> (OpReset a)
for a   in All                 case (Inc a) (Pos 9) (Pos (1 0))  -> (OpReset a)

for a m n in All * Sexpr Decimal * Decimal - {9}
    case (Inc a) (Pos (m n)) (Pos (m inc[n])) -> (OpReset a)
for a m   in All * Sexpr Decimal 
    case (Inc a) (Pos (m 9)) (Pos m)          -> (OpReset (Inc (Append 0 a)))

// Incrementing Negative

for a n in All * Decimal - {0} case (Dec a) (Pos n) (Pos dec[n]) -> (OpReset a)
for a   in All                 case (Dec a) (Pos 0) (Neg 1)      -> (OpReset a)

for a m n in All * Sexpr Decimal * Decimal - {0} 
    case (Inc a) (Neg (m n)) (Neg (m dec[n])) -> (OpReset a)
for a m   in All * Sexpr Decimal
    case (Inc a) (Neg (m 0)) (Neg m)          -> (OpReset (Inc (Append 9 a)))

// Decrementing Positive

for a n in All * Decimal - {0} case (Dec a) (Pos n) (Pos dec[n]) -> (OpReset a)
for a   in All                 case (Dec a) (Pos 0) (Neg 1)      -> (OpReset a)

for a m n in All * Sexpr Decimal * Decimal - {0} 
    case (Dec a) (Pos (m n)) (Pos (m dec[n])) -> (OpReset a)
for a m   in All * Sexpr Decimal 
    case (Dec a) (Pos (m 0)) (Pos m)          -> (OpReset (Dec (Append 9 a)))

// Decrementing Negative

for a n in All * Decimal - {9} case (Dec a) (Neg n) (Neg inc[n]) -> (OpReset a)
for a   in All                 case (Dec a) (Neg 9) (Neg (0 1))  -> (OpReset a)

for a m n in All * Sexpr Decimal * Decimal - {9} 
    case (Dec a) (Neg (m n)) (Neg (m inc[n])) -> (NegReset a)
for a m in Sexpr Decimal * All 
    case (Dec a) (Neg (9 n)) (Neg n)          -> (OpReset (Dec (Append 0 a)))



for a n in All * Sexpr Decimal case (OpReset a)  _ _ <- a

for a (sign m) n in All * SignedDecimal * Decimal case 
    (Append n a) (sign m) (sign (m n)) -> (OpReset a)