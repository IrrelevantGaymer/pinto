let IntList = {(Cons i r) for (i r) in Int * IntList} + {Nil}

for a in IntList case PrintList a a -> (Reset (PrintList Nil (PrintLn' "" (Right PrintList))))

for (i l a) in Int * IntList * All 
    case (PrintList Nil a) (Cons i l) i -> (Reset (ShowLn (Inject l (PrintList (Cons i Nil) a))))
for (i j l m a) in Int * Int * IntList * IntList * All 
    case (PrintList (Cons i l) a) (Cons j m) j -> (Reset (ShowLn (Inject m (PrintList (Cons j (Cons i l)) a))))
for (l a) in IntList * All 
    case (PrintList l a) Nil Nil -> (Reset (Inject l (ReverseList Nil a)))

for (a b) in All * All 
    case (ReverseList b a) Nil b -> (Reset a)
for (i l a) in Int * IntList * All 
    case (ReverseList Nil a) (Cons i l) l -> (Reset (ReverseList (Cons i Nil) a))
for (i j l m a) in Int * Int * IntList * IntList * All 
    case (ReverseList (Cons i l) a) (Cons j m) m -> (Reset (ReverseList (Cons j (Cons i l)) a))

start tape with PrintList = [
    (Cons 6 (Cons 9 Nil))
    (Cons 4 (Cons 2 (Cons 0 Nil)))
    (Cons 8 (Cons 0 (Cons 0 (Cons 8 (Cons 5 Nil)))))
    end
]